fs = 48000;
fc = 5000;
Wn = fc/(fs/2);
order = 4;
% Design (Butterworth)
[z,p,k] = butter(order, Wn);          % zpk form
[sos,g] = zp2sos(z,p,k);              % second-order sections
[b,a] = sos2tf(sos,g);                % overall b and a (length M+1 and N+1)
% Example input
t = (0:1/fs:0.01)';
x = 0.7*sin(2*pi*1000*t) + 0.3*sin(2*pi*12000*t);
% Normalize lengths to same (pad)
M = length(b);
N = length(a);
% Write coeff header
fid = fopen('iir_coeffs.h','w');
fprintf(fid, '// iir_coeffs.h generated by iir_generate.m\n');
fprintf(fid, '#ifndef IIR_COEFFS_H\n#define IIR_COEFFS_H\n\n');
fprintf(fid, 'const int IIR_B_LEN = %d;\n', M);
fprintf(fid, 'const int IIR_A_LEN = %d;\n', N);
fprintf(fid, 'const float iir_b[%d] = {', M);
for k = 1:M
    if k < M, fprintf(fid, '%1.12ff, ', b(k));
    else fprintf(fid, '%1.12ff};\n\n', b(k));
    end
end
fprintf(fid, 'const float iir_a[%d] = {', N);
for k = 1:N
    if k < N, fprintf(fid, '%1.12ff, ', a(k));
    else fprintf(fid, '%1.12ff};\n\n', a(k));
    end
end
fprintf(fid, '#endif // IIR_COEFFS_H\n');
fclose(fid);
% Write input_data.h same as FIR case
fid = fopen('input_data.h','w');
fprintf(fid, '// input_data.h generated by iir_generate.m\n');
fprintf(fid, '#ifndef INPUT_DATA_H\n#define INPUT_DATA_H\n\n');
L = length(x);
fprintf(fid, 'const int INPUT_LEN = %d;\n', L);
fprintf(fid, 'const float input_data[%d] = {', L);
for k = 1:L
    if k < L, fprintf(fid, '%1.8ff, ', x(k));
    else fprintf(fid, '%1.8ff};\n\n', x(k));
    end
end
fprintf(fid, '#endif // INPUT_DATA_H\n');
fclose(fid);
disp('Written iir_coeffs.h and input_data.h. Copy into CCS project.');

%alternate program
fs = 8000;             % Sampling frequency
fc = 1000;             % Cutoff frequency
order = 2;             % Low order for simplicity
% Design IIR lowpass Butterworth
[b, a] = butter(order, fc/(fs/2));
% Example input: sum of two sines
n = 0:99;
x = sin(2*pi*200*n/fs) + sin(2*pi*1500*n/fs);
% Write coefficients to iir_coeffs.h
fid = fopen('iir_coeffs.h','w');
fprintf(fid, '#define NB %d\n', length(b));
fprintf(fid, '#define NA %d\n', length(a));
fprintf(fid, 'float iir_b[NB] = {');
fprintf(fid, '%f, ', b(1:end-1));
fprintf(fid, '%f};\n', b(end));
fprintf(fid, 'float iir_a[NA] = {');
fprintf(fid, '%f, ', a(1:end-1));
fprintf(fid, '%f};\n', a(end));
fclose(fid);
% Write input to input_data.h
fid = fopen('input_data.h','w');
fprintf(fid, '#define INPUT_LEN %d\n', length(x));
fprintf(fid, 'float input_data[INPUT_LEN] = {');
fprintf(fid, '%f, ', x(1:end-1));
fprintf(fid, '%f};\n', x(end));
fclose(fid);
disp('Generated iir_coeffs.h and input_data.h');
